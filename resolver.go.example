package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/compliance-framework/configuration-service/internal/service/relational"
	"github.com/google/uuid"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"strings"
)

// main is the entry point of the configuration service.
// It opens the database, loads the full profile, resolves controls into an OSCAL catalog,
// and assembles the catalog back matter for output.
func main() {
    db, err = gorm.Open(postgres.Open("host=localhost user=postgres password=postgres dbname=ccf port=5432 sslmode=disable"), &gorm.Config{
        DisableForeignKeyConstraintWhenMigrating: true,
    })
	if err != nil {
		panic("failed to connect database")
	}

	profile, err := FindFullProfile(db, "512149a6-7f04-4c01-bb1b-78eafd6a950d")
	if err != nil {
		panic(err)
	}

	catalog := NewCatalog()

	catalogUUids, allControls := ResolveControls(profile, db)

	catalog.Metadata = profile.Metadata
	catalog.Controls = append(catalog.Controls, *allControls...)

	backmatters, err := GetCatalogBackmatter(db, catalogUUids)
	if err != nil {
		panic(err)
	}

	catalog.BackMatter = CombineBackmatter(backmatters)

	outputJson, err := json.Marshal(catalog.MarshalOscal())
	fmt.Println(string(outputJson))
}

// CombineBackmatter merges multiple BackMatter slices into a single BackMatter by concatenating all resources.
func CombineBackmatter(backmatters *[]relational.BackMatter) *relational.BackMatter {
	backmatter := relational.BackMatter{}
	for _, data := range *backmatters {
		backmatter.Resources = append(backmatter.Resources, data.Resources...)
	}
	return &backmatter
}

// GetCatalogBackmatter retrieves back matter records for the given catalog UUIDs,
// preloading associated resources from the database.
func GetCatalogBackmatter(db *gorm.DB, uuids []uuid.UUID) (*[]relational.BackMatter, error) {
	var backmatters *[]relational.BackMatter
	if err := db.Preload("Resources").Find(&backmatters, "parent_id IN ? AND parent_type = 'catalogs'", uuids).Error; err != nil {
		return nil, err
	}
	return backmatters, nil
}

// findPartRecursive performs a depth-first search through a slice of Parts
// to locate a Part with the specified targetID, returning a pointer or nil if not found.
func findPartRecursive(parts []relational.Part, targetID string) *relational.Part {
	for i := range parts {
		if parts[i].ID == targetID {
			return &parts[i]
		}
		if strings.HasPrefix(targetID, parts[i].ID) {
			if p := findPartRecursive(parts[i].Parts, targetID); p != nil {
				return p
			}
		}
	}
	return nil
}

// buildSetParams creates a map from parameter IDs to their settings for quick lookup.
func buildSetParams(settings []relational.ParameterSetting) map[string]relational.ParameterSetting {
	m := make(map[string]relational.ParameterSetting, len(settings))
	for _, s := range settings {
		m[s.ParamID] = s
	}
	return m
}

// buildAdditions groups all Alteration additions by control ID into a map for efficient access.
func buildAdditions(alters []relational.Alteration) map[string][]relational.Addition {
	m := make(map[string][]relational.Addition)
	for _, alt := range alters {
		m[alt.ControlID] = alt.Adds
	}
	return m
}

// applySetParameters updates the Params slice of a control based on provided ParameterSetting constraints.
func applySetParameters(ctrl relational.Control, setParams map[string]relational.ParameterSetting) relational.Control {
	for i, param := range ctrl.Params {
		if sp, ok := setParams[param.ID]; ok {
			param.Constraints = sp.Constraints
			ctrl.Params[i] = param
		}
	}
	return ctrl
}

// applyAdditions applies a list of additions to a control and its nested parts, modifying titles, props, params, links, and parts.
func applyAdditions(ctrl relational.Control, additions []relational.Addition) relational.Control {
	for _, addition := range additions {
		if ctrl.ID == addition.ByID {
			if addition.Position == "starting" || addition.Position == "ending" {
				applyAdditionsToControl(&ctrl, addition, addition.Position)
			} else if addition.Position == "before" || addition.Position == "after" {
				// TODO - inject the addition either before or after the current id
			}
		} else if part := findPartRecursive(ctrl.Parts, addition.ByID); part != nil {
			if addition.Position == "starting" || addition.Position == "ending" {
				applyAdditionsToPart(part, addition, addition.Position)
			} else if addition.Position == "before" || addition.Position == "after" {
				// TODO - inject the addition either before or after the current id
			}
		}
	}
	return ctrl
}

// applyAdditionsToPart applies a single Addition to the specified Part at the given position ("starting" or "ending"),
// recursively descending into its child parts.
func applyAdditionsToPart(part *relational.Part, addition relational.Addition, position string) {
	if addition.Title != "" {
		part.Title = addition.Title
	}
	if addition.Props != nil {
		if position == "starting" {
			part.Props = append(addition.Props, part.Props...)
		} else if position == "ending" {
			part.Props = append(part.Props, addition.Props...)
		}
	}
	if addition.Links != nil {
		if position == "starting" {
			part.Links = append(addition.Links, part.Links...)
		} else if position == "ending" {
			part.Links = append(part.Links, addition.Links...)
		}
	}
	if addition.Parts != nil {
		if position == "starting" {
			part.Parts = append(addition.Parts, part.Parts...)
		} else if position == "ending" {
			part.Parts = append(part.Parts, addition.Parts...)
		}
	}
}

// applyAdditionsToControl applies a single Addition to the specified Control at the given position,
// then recurses into its Parts to apply the same addition where needed.
func applyAdditionsToControl(ctrl *relational.Control, addition relational.Addition, position string) {
	if addition.Title != "" {
		ctrl.Title = addition.Title
	}
	if addition.Props != nil {
		if position == "starting" {
			ctrl.Props = append(addition.Props, ctrl.Props...)
		} else if position == "ending" {
			ctrl.Props = append(ctrl.Props, addition.Props...)
		}
	}
	if addition.Params != nil {
		if position == "starting" {
			ctrl.Params = append(addition.Params, ctrl.Params...)
		} else if position == "ending" {
			ctrl.Params = append(ctrl.Params, addition.Params...)
		}
	}
	if addition.Links != nil {
		if position == "starting" {
			ctrl.Links = append(addition.Links, ctrl.Links...)
		} else if position == "ending" {
			ctrl.Links = append(ctrl.Links, addition.Links...)
		}
	}
	if addition.Parts != nil {
		if position == "starting" {
			ctrl.Parts = append(addition.Parts, ctrl.Parts...)
		} else if position == "ending" {
			ctrl.Parts = append(ctrl.Parts, addition.Parts...)
		}
	}
}

// processImport loads controls of a given import from the database, applies parameter settings and additions,
// and returns the catalog UUID along with the modified controls.
func processImport(db *gorm.DB, profile *relational.Profile, imp relational.Import, setParams map[string]relational.ParameterSetting, additions map[string][]relational.Addition) (uuid.UUID, []relational.Control) {
	ids := GatherControlIds(imp)
	catalogID, err := FindOscalCatalogFromBackMatter(profile, imp.Href)
	if err != nil {
		panic(err)
	}

	var controls []relational.Control
	if err := db.Preload("Controls").Find(&controls, "catalog_id = ? AND id IN ?", catalogID, ids).Error; err != nil {
		panic(err)
	}

	for i := range controls {
		controls[i] = applySetParameters(controls[i], setParams)
		if list, ok := additions[controls[i].ID]; ok {
			controls[i] = applyAdditions(controls[i], list)
		}
	}
	return catalogID, controls
}

// ResolveControls orchestrates control resolution for all imports in the profile,
// returning the list of catalog UUIDs and the fully processed controls.
func ResolveControls(profile *relational.Profile, db *gorm.DB) ([]uuid.UUID, *[]relational.Control) {
	setParams := buildSetParams(profile.Modify.SetParameters)
	additions := buildAdditions(profile.Modify.Alters)

	var allControls []relational.Control

	uuids := make([]uuid.UUID, len(profile.Imports))

	for i, imp := range profile.Imports {
		uuid, processed := processImport(db, profile, imp, setParams, additions)
		allControls = append(allControls, processed...)
		uuids[i] = uuid
	}

	return uuids, &allControls
}

// FindOscalCatalogFromBackMatter searches the profile’s BackMatter for a resource matching the reference string
// and returns its catalog UUID if found.
func FindOscalCatalogFromBackMatter(profile *relational.Profile, ref string) (uuid.UUID, error) {
	if strings.HasPrefix(ref, "#") {
		ref = strings.TrimPrefix(ref, "#")
	}

	resources := profile.BackMatter.Resources
	for _, resource := range resources {
		if resource.UUIDModel.ID.String() == ref {
			for _, link := range resource.RLinks {
				if link.MediaType == "application/ccf+oscal+json" {
					return uuid.Parse(link.Href)
				}
			}
		}
	}
	return uuid.Nil, errors.New("No valid catalog UUID was found within the backmatter. Ref: " + ref)
}

// GatherControlIds extracts unique control IDs from an Import’s IncludeControls, avoiding duplicates.
func GatherControlIds(imports relational.Import) []string {
	var controlIds []string
	seen := map[string]bool{}

	for _, includedControls := range imports.IncludeControls {
		for _, value := range includedControls.WithIds {
			if _, ok := seen[value]; !ok {
				seen[value] = true
				controlIds = append(controlIds, value)
			}
		}
	}
	return controlIds
}

// FindFullProfile loads a Profile by its UUID string from the database,
// preloading all related entities such as metadata, imports, merges, modifications, and back matter.
func FindFullProfile(db *gorm.DB, profileId string) (*relational.Profile, error) {
	id, err := uuid.Parse(profileId)
	if err != nil {
		return nil, err
	}

	var profile relational.Profile
	if err := db.
		Preload("Metadata").
		Preload("Metadata.Revisions").
		Preload("Imports").
		Preload("Imports.IncludeControls").
		Preload("Imports.ExcludeControls").
		Preload("Merge").
		Preload("Modify").
		Preload("Modify.SetParameters").
		Preload("Modify.Alters").
		Preload("Modify.Alters.Adds").
		Preload("BackMatter").
		Preload("BackMatter.Resources").
		Find(&profile, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return &profile, nil
}

// NewCatalog creates a new Catalog instance with a generated UUID, ready for population.
func NewCatalog() *relational.Catalog {
	catalog := relational.Catalog{}
	id, _ := uuid.NewUUID()
	catalog.UUIDModel.ID = &id
	return &catalog
}
