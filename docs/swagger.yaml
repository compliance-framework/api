basePath: /api
consumes:
- application/json
definitions:
  api.Error:
    properties:
      errors:
        additionalProperties: true
        type: object
    type: object
  handler.GenericDataListResponse-oscal_List_response:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/oscal.List.response'
        type: array
    type: object
  handler.GenericDataListResponse-oscal_List_responseCatalog:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/oscal.List.responseCatalog'
        type: array
    type: object
  handler.GenericDataListResponse-oscal_List_responseComponentDefinition:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/oscal.List.responseComponentDefinition'
        type: array
    type: object
  handler.GenericDataListResponse-oscalTypes_1_1_3_Control:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
        type: array
    type: object
  handler.GenericDataListResponse-oscalTypes_1_1_3_Group:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Group'
        type: array
    type: object
  handler.GenericDataListResponse-service_Catalog:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Catalog'
        type: array
    type: object
  handler.GenericDataListResponse-service_CatalogControl:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.CatalogControl'
        type: array
    type: object
  handler.GenericDataListResponse-service_CatalogGroup:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.CatalogGroup'
        type: array
    type: object
  handler.GenericDataListResponse-service_Dashboard:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Dashboard'
        type: array
    type: object
  handler.GenericDataListResponse-service_Finding:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Finding'
        type: array
    type: object
  handler.GenericDataListResponse-service_FindingsBySubject:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.FindingsBySubject'
        type: array
    type: object
  handler.GenericDataListResponse-service_FindingsGroupedByControl:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.FindingsGroupedByControl'
        type: array
    type: object
  handler.GenericDataListResponse-service_Observation:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Observation'
        type: array
    type: object
  handler.GenericDataListResponse-service_StatusOverTimeGroup:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.StatusOverTimeGroup'
        type: array
    type: object
  handler.GenericDataListResponse-service_StatusOverTimeRecord:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.StatusOverTimeRecord'
        type: array
    type: object
  handler.GenericDataListResponse-string:
    properties:
      data:
        description: Items from the list response
        items:
          type: string
        type: array
    type: object
  handler.GenericDataResponse-array_service_Subject:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Subject'
        type: array
    type: object
  handler.GenericDataResponse-oscal_Get_response:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscal.Get.response'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-oscal_Get_responseCatalog:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscal.Get.responseCatalog'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-oscalTypes_1_1_3_BackMatter:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscalTypes_1_1_3.BackMatter'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-oscalTypes_1_1_3_Catalog:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscalTypes_1_1_3.Catalog'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-oscalTypes_1_1_3_Control:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscalTypes_1_1_3.Control'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-oscalTypes_1_1_3_Group:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscalTypes_1_1_3.Group'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-oscalTypes_1_1_3_SystemCharacteristics:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/oscalTypes_1_1_3.SystemCharacteristics'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-service_Catalog:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Catalog'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-service_Dashboard:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Dashboard'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-service_Observation:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Observation'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-service_Subject:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Subject'
        description: Items from the list response
    type: object
  handler.UpdateSubjectRequest:
    properties:
      remarks:
        type: string
      title:
        type: string
    type: object
  handler.createDashboardRequest:
    properties:
      filter:
        $ref: '#/definitions/labelfilter.Filter'
      name:
        type: string
    required:
    - filter
    - name
    type: object
  labelfilter.Condition:
    properties:
      label:
        description: Label name (e.g., "type", "group", "app").
        type: string
      operator:
        description: Operator (e.g., "=", "!=", etc.).
        type: string
      value:
        description: Value for the condition (e.g., "ssh", "prod").
        type: string
    type: object
  labelfilter.Filter:
    properties:
      scope:
        $ref: '#/definitions/labelfilter.Scope'
    type: object
  labelfilter.Query:
    properties:
      operator:
        description: Logical operator (e.g., "AND", "OR").
        type: string
      scopes:
        description: Scopes can be either `Condition` or nested `Query`.
        items:
          $ref: '#/definitions/labelfilter.Scope'
        type: array
    type: object
  labelfilter.Scope:
    properties:
      condition:
        $ref: '#/definitions/labelfilter.Condition'
      query:
        $ref: '#/definitions/labelfilter.Query'
    type: object
  oscal.Get.response:
    properties:
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      uuid:
        type: string
    type: object
  oscal.Get.responseCatalog:
    properties:
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      uuid:
        type: string
    type: object
  oscal.List.response:
    properties:
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      uuid:
        type: string
    type: object
  oscal.List.responseCatalog:
    properties:
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      uuid:
        type: string
    type: object
  oscal.List.responseComponentDefinition:
    properties:
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.Action:
    properties:
      date:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      responsible-parties:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ResponsibleParty'
        type: array
      system:
        type: string
      type:
        type: string
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.Address:
    properties:
      addr-lines:
        items:
          type: string
        type: array
      city:
        type: string
      country:
        type: string
      postal-code:
        type: string
      state:
        type: string
      type:
        type: string
    type: object
  oscalTypes_1_1_3.AuthorizationBoundary:
    properties:
      description:
        type: string
      diagrams:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Diagram'
        type: array
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
    type: object
  oscalTypes_1_1_3.BackMatter:
    properties:
      resources:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Resource'
        type: array
    type: object
  oscalTypes_1_1_3.Base64:
    properties:
      filename:
        type: string
      media-type:
        type: string
      value:
        type: string
    type: object
  oscalTypes_1_1_3.Catalog:
    properties:
      back-matter:
        $ref: '#/definitions/oscalTypes_1_1_3.BackMatter'
      controls:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
        type: array
      groups:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Group'
        type: array
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      params:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Parameter'
        type: array
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.Citation:
    properties:
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      text:
        type: string
    type: object
  oscalTypes_1_1_3.ConstraintTest:
    properties:
      expression:
        type: string
      remarks:
        type: string
    type: object
  oscalTypes_1_1_3.Control:
    properties:
      class:
        type: string
      controls:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
        type: array
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      params:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Parameter'
        type: array
      parts:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Part'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      title:
        type: string
    type: object
  oscalTypes_1_1_3.DataFlow:
    properties:
      description:
        type: string
      diagrams:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Diagram'
        type: array
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
    type: object
  oscalTypes_1_1_3.Diagram:
    properties:
      caption:
        type: string
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.DocumentId:
    properties:
      identifier:
        type: string
      scheme:
        type: string
    type: object
  oscalTypes_1_1_3.Group:
    properties:
      class:
        type: string
      controls:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
        type: array
      groups:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Group'
        type: array
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      params:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Parameter'
        type: array
      parts:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Part'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      title:
        type: string
    type: object
  oscalTypes_1_1_3.Hash:
    properties:
      algorithm:
        type: string
      value:
        type: string
    type: object
  oscalTypes_1_1_3.Impact:
    properties:
      adjustment-justification:
        type: string
      base:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      selected:
        type: string
    type: object
  oscalTypes_1_1_3.InformationType:
    properties:
      availability-impact:
        $ref: '#/definitions/oscalTypes_1_1_3.Impact'
      categorizations:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.InformationTypeCategorization'
        type: array
      confidentiality-impact:
        $ref: '#/definitions/oscalTypes_1_1_3.Impact'
      description:
        type: string
      integrity-impact:
        $ref: '#/definitions/oscalTypes_1_1_3.Impact'
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      title:
        type: string
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.InformationTypeCategorization:
    properties:
      information-type-ids:
        items:
          type: string
        type: array
      system:
        type: string
    type: object
  oscalTypes_1_1_3.Link:
    properties:
      href:
        type: string
      media-type:
        type: string
      rel:
        type: string
      resource-fragment:
        type: string
      text:
        type: string
    type: object
  oscalTypes_1_1_3.Location:
    properties:
      address:
        $ref: '#/definitions/oscalTypes_1_1_3.Address'
      email-addresses:
        items:
          type: string
        type: array
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      telephone-numbers:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.TelephoneNumber'
        type: array
      title:
        type: string
      urls:
        items:
          type: string
        type: array
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.Metadata:
    properties:
      actions:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Action'
        type: array
      document-ids:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.DocumentId'
        type: array
      last-modified:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      locations:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Location'
        type: array
      oscal-version:
        type: string
      parties:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Party'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      published:
        type: string
      remarks:
        type: string
      responsible-parties:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ResponsibleParty'
        type: array
      revisions:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.RevisionHistoryEntry'
        type: array
      roles:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Role'
        type: array
      title:
        type: string
      version:
        type: string
    type: object
  oscalTypes_1_1_3.NetworkArchitecture:
    properties:
      description:
        type: string
      diagrams:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Diagram'
        type: array
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
    type: object
  oscalTypes_1_1_3.Parameter:
    properties:
      class:
        type: string
      constraints:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ParameterConstraint'
        type: array
      depends-on:
        type: string
      guidelines:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ParameterGuideline'
        type: array
      id:
        type: string
      label:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      select:
        $ref: '#/definitions/oscalTypes_1_1_3.ParameterSelection'
      usage:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  oscalTypes_1_1_3.ParameterConstraint:
    properties:
      description:
        type: string
      tests:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ConstraintTest'
        type: array
    type: object
  oscalTypes_1_1_3.ParameterGuideline:
    properties:
      prose:
        type: string
    type: object
  oscalTypes_1_1_3.ParameterSelection:
    properties:
      choice:
        items:
          type: string
        type: array
      how-many:
        type: string
    type: object
  oscalTypes_1_1_3.Part:
    properties:
      class:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      name:
        type: string
      ns:
        type: string
      parts:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Part'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      prose:
        type: string
      title:
        type: string
    type: object
  oscalTypes_1_1_3.Party:
    properties:
      addresses:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Address'
        type: array
      email-addresses:
        items:
          type: string
        type: array
      external-ids:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.PartyExternalIdentifier'
        type: array
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      location-uuids:
        items:
          type: string
        type: array
      member-of-organizations:
        items:
          type: string
        type: array
      name:
        type: string
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      short-name:
        type: string
      telephone-numbers:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.TelephoneNumber'
        type: array
      type:
        type: string
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.PartyExternalIdentifier:
    properties:
      id:
        type: string
      scheme:
        type: string
    type: object
  oscalTypes_1_1_3.Property:
    properties:
      class:
        type: string
      group:
        type: string
      name:
        type: string
      ns:
        type: string
      remarks:
        type: string
      uuid:
        type: string
      value:
        type: string
    type: object
  oscalTypes_1_1_3.Resource:
    properties:
      base64:
        $ref: '#/definitions/oscalTypes_1_1_3.Base64'
      citation:
        $ref: '#/definitions/oscalTypes_1_1_3.Citation'
      description:
        type: string
      document-ids:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.DocumentId'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      rlinks:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ResourceLink'
        type: array
      title:
        type: string
      uuid:
        type: string
    type: object
  oscalTypes_1_1_3.ResourceLink:
    properties:
      hashes:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Hash'
        type: array
      href:
        type: string
      media-type:
        type: string
    type: object
  oscalTypes_1_1_3.ResponsibleParty:
    properties:
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      party-uuids:
        items:
          type: string
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      role-id:
        type: string
    type: object
  oscalTypes_1_1_3.RevisionHistoryEntry:
    properties:
      last-modified:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      oscal-version:
        type: string
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      published:
        type: string
      remarks:
        type: string
      title:
        type: string
      version:
        type: string
    type: object
  oscalTypes_1_1_3.Role:
    properties:
      description:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      short-name:
        type: string
      title:
        type: string
    type: object
  oscalTypes_1_1_3.SecurityImpactLevel:
    properties:
      security-objective-availability:
        type: string
      security-objective-confidentiality:
        type: string
      security-objective-integrity:
        type: string
    type: object
  oscalTypes_1_1_3.Status:
    properties:
      remarks:
        type: string
      state:
        type: string
    type: object
  oscalTypes_1_1_3.SystemCharacteristics:
    properties:
      authorization-boundary:
        $ref: '#/definitions/oscalTypes_1_1_3.AuthorizationBoundary'
      data-flow:
        $ref: '#/definitions/oscalTypes_1_1_3.DataFlow'
      date-authorized:
        type: string
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      network-architecture:
        $ref: '#/definitions/oscalTypes_1_1_3.NetworkArchitecture'
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      remarks:
        type: string
      responsible-parties:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.ResponsibleParty'
        type: array
      security-impact-level:
        $ref: '#/definitions/oscalTypes_1_1_3.SecurityImpactLevel'
      security-sensitivity-level:
        type: string
      status:
        $ref: '#/definitions/oscalTypes_1_1_3.Status'
      system-ids:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.SystemId'
        type: array
      system-information:
        $ref: '#/definitions/oscalTypes_1_1_3.SystemInformation'
      system-name:
        type: string
      system-name-short:
        type: string
    type: object
  oscalTypes_1_1_3.SystemId:
    properties:
      id:
        type: string
      identifier-type:
        type: string
    type: object
  oscalTypes_1_1_3.SystemInformation:
    properties:
      information-types:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.InformationType'
        type: array
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
    type: object
  oscalTypes_1_1_3.TelephoneNumber:
    properties:
      number:
        type: string
      type:
        type: string
    type: object
  service.Catalog:
    properties:
      metadata:
        $ref: '#/definitions/oscalTypes_1_1_3.Metadata'
      uuid:
        type: string
    type: object
  service.CatalogControl:
    properties:
      class:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      parent:
        $ref: '#/definitions/service.CatalogItemParentIdentifier'
      parts:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Part'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      title:
        type: string
      uuid:
        description: |-
          UUID as a primary key, although it likely won't be used.
          The primary key for a group consists of a compound (class + id)
        type: string
    type: object
  service.CatalogGroup:
    properties:
      class:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Link'
        type: array
      parent:
        $ref: '#/definitions/service.CatalogItemParentIdentifier'
      parts:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Part'
        type: array
      props:
        items:
          $ref: '#/definitions/oscalTypes_1_1_3.Property'
        type: array
      title:
        type: string
      uuid:
        description: |-
          UUID as a primary key, although it likely won't be used.
          The primary key for a group consists of a compound (class + id)
        type: string
    type: object
  service.CatalogItemParentIdentifier:
    properties:
      catalog_id:
        type: string
      class:
        type: string
      id:
        type: string
      type:
        $ref: '#/definitions/service.CatalogItemParentType'
    type: object
  service.CatalogItemParentType:
    enum:
    - control
    - group
    - catalog
    type: string
    x-enum-varnames:
    - CatalogItemParentTypeControl
    - CatalogItemParentTypeGroup
    - CatalogItemParentTypeCatalog
  service.Dashboard:
    properties:
      filter:
        $ref: '#/definitions/labelfilter.Filter'
      name:
        type: string
      uuid:
        type: string
    type: object
  service.Finding:
    properties:
      _id:
        description: ID is the unique ID for this specific observation, and will be
          used as the primary key in the database.
        type: string
      collected:
        type: string
      components:
        description: Which components of the subject are being judged
        items:
          type: string
        type: array
      controls:
        description: Which controls did we validate
        items:
          $ref: '#/definitions/types.ControlReference'
        type: array
      description:
        type: string
      labels:
        additionalProperties:
          type: string
        description: Labels represent the unique labels which can be used to filter
          for findings in the UI.
        type: object
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      observations:
        description: Which observations led to this judgment ?
        items:
          type: string
        type: array
      origins:
        description: Who is generating this finding
        items:
          $ref: '#/definitions/types.Origin'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      risks:
        description: Which risks are associated with what we've tested
        items:
          $ref: '#/definitions/types.RiskReference'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/types.FindingStatus'
        description: What is our conclusion drawn for this finding. satisfied | not-satisfied
      subjects:
        description: What are we making a judgement against
        items:
          type: string
        type: array
      title:
        type: string
      uuid:
        description: |-
          UUID needs to remain consistent when automation runs again, but unique for each subject.
          It represents the "stream" of the same finding being made over time.
        type: string
    type: object
  service.FindingsBySubject:
    properties:
      findings:
        items:
          $ref: '#/definitions/service.Finding'
        type: array
      subject:
        type: string
    type: object
  service.FindingsGroupedByControl:
    properties:
      controlid:
        type: string
      findings:
        items:
          $ref: '#/definitions/service.Finding'
        type: array
    type: object
  service.Observation:
    properties:
      _id:
        description: ID is the unique ID for this specific observation, and will be
          used as the primary key in the database.
        type: string
      activities:
        description: What steps did we take to make this observation
        items:
          $ref: '#/definitions/types.Activity'
        type: array
      collected:
        type: string
      components:
        description: Which components of the subject are being observed
        items:
          type: string
        type: array
      description:
        type: string
      expires:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      methods:
        items:
          type: string
        type: array
      origins:
        description: Who is generating this finding
        items:
          $ref: '#/definitions/types.Origin'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      relevant-evidence:
        description: What exactly did we see
        items:
          $ref: '#/definitions/types.RelevantEvidence'
        type: array
      remarks:
        type: string
      subjects:
        description: What are we observing
        items:
          type: string
        type: array
      title:
        type: string
      uuid:
        description: |-
          UUID needs to remain consistent when automation runs again, but unique for each subject.
          It represents the "stream" of the same observation being made over time.
        type: string
    type: object
  service.StatusOverTimeGroup:
    properties:
      interval:
        type: string
      statuses:
        items:
          $ref: '#/definitions/service.StatusOverTimeRecord'
        type: array
    type: object
  service.StatusOverTimeRecord:
    properties:
      count:
        type: integer
      status:
        type: string
    type: object
  service.Subject:
    properties:
      _id:
        type: string
      attributes:
        additionalProperties:
          type: string
        type: object
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  types.Activity:
    properties:
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      steps:
        items:
          $ref: '#/definitions/types.Step'
        type: array
      title:
        type: string
      uuid:
        type: string
    type: object
  types.ControlReference:
    properties:
      class:
        type: string
      control-id:
        type: string
      statement-ids:
        items:
          type: string
        type: array
    type: object
  types.FindingStatus:
    properties:
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      state:
        type: string
      title:
        type: string
    type: object
  types.Link:
    properties:
      href:
        type: string
      media-type:
        type: string
      rel:
        type: string
      resource-fragment:
        type: string
      text:
        type: string
    type: object
  types.Origin:
    properties:
      actors:
        items:
          $ref: '#/definitions/types.OriginActor'
        type: array
    type: object
  types.OriginActor:
    properties:
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      title:
        type: string
      type:
        type: string
      uuid:
        type: string
    type: object
  types.Property:
    properties:
      class:
        type: string
      group:
        type: string
      name:
        type: string
      ns:
        type: string
      remarks:
        type: string
      uuid:
        type: string
      value:
        type: string
    type: object
  types.RelevantEvidence:
    properties:
      description:
        type: string
      href:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
    type: object
  types.RiskReference:
    properties:
      href:
        description: If a Href is specified here, it means we are referencing a common
          risk, and should be pulled from there.
        type: string
      identifier:
        type: string
      origins:
        description: Who is generating this risk
        items:
          $ref: '#/definitions/types.Origin'
        type: array
      status:
        description: The status for the risk. This can either be open|closed based
          on whether the risk is active or not.
        type: string
      threat-ids:
        description: |-
          These threats relate to well known threats like phishing emails, brute force attacks, etc. often detailed
          by cyber-security organisations.
        items:
          $ref: '#/definitions/types.ThreatId'
        type: array
    type: object
  types.Step:
    properties:
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      title:
        type: string
      uuid:
        type: string
    type: object
  types.ThreatId:
    properties:
      href:
        type: string
      id:
        type: string
      system:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API for the Continuous Compliance Framework.
  title: Continuous Compliance Framework API
  version: "1"
paths:
  /catalogs:
    get:
      description: Retrieves all catalogs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Catalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List catalogs
      tags:
      - Catalogs
    post:
      consumes:
      - application/json
      description: Creates a new catalog.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Catalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new catalog
      tags:
      - Catalogs
  /catalogs/{id}:
    get:
      description: Retrieves a single Catalog by its unique ID.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Catalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a Catalog
      tags:
      - Catalogs
  /compliance-by-uuid/{uuid}:
    get:
      consumes:
      - application/json
      description: Fetches an intervalled compliance report for findings that match
        the provided uuid. The report groups findings status over time and returns
        a list of compliance report groups.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_StatusOverTimeGroup'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get intervalled compliance report by finding uuid
      tags:
      - Findings
  /controls:
    get:
      description: Retrieves catalog controls for a given parent identifier specified
        via query parameters (id, class, type).
      parameters:
      - description: Parent identifier id
        in: query
        name: id
        required: true
        type: string
      - description: Parent identifier class
        in: query
        name: class
        required: true
        type: string
      - description: Parent identifier type (catalog, group, or control)
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_CatalogControl'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List catalog controls by parent
      tags:
      - CatalogControls
  /controls/control/{catalog}/{class}/{id}:
    get:
      description: Retrieves catalog controls associated with a control parent based
        on the parent's class and id.
      parameters:
      - description: Catalog ID
        in: path
        name: catalog
        required: true
        type: string
      - description: Parent control class
        in: path
        name: class
        required: true
        type: string
      - description: Parent control id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_CatalogControl'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get catalog controls for a control parent
      tags:
      - CatalogControls
  /controls/group/{catalog}/{class}/{id}:
    get:
      description: Retrieves catalog controls associated with a group parent based
        on the parent's class and id.
      parameters:
      - description: Catalog ID
        in: path
        name: catalog
        required: true
        type: string
      - description: Parent control class
        in: path
        name: class
        required: true
        type: string
      - description: Parent control id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_CatalogControl'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get catalog controls for a group parent
      tags:
      - CatalogControls
  /dashboard:
    get:
      description: Retrieves all dashboards.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List dashboards
      tags:
      - Dashboards
    post:
      consumes:
      - application/json
      description: Creates a new dashboard.
      parameters:
      - description: Dashboard to add
        in: body
        name: dashboard
        required: true
        schema:
          $ref: '#/definitions/handler.createDashboardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new dashboard
      tags:
      - Dashboards
  /dashboard/{id}:
    get:
      description: Retrieves a single dashboard by its unique ID.
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a dashboard
      tags:
      - Dashboards
  /findings:
    post:
      consumes:
      - application/json
      description: Creates multiple findings in the CCF API, as well as their subject
        and component counterparts.
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create new findings
      tags:
      - Findings
  /findings/{id}:
    get:
      description: Fetches a finding based on its internal ID.
      parameters:
      - description: Finding ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Finding'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a single finding
      tags:
      - Findings
  /findings/by-control/{class}:
    get:
      consumes:
      - application/json
      description: Searches for findings and groups them by control class
      parameters:
      - description: Control Class
        in: path
        name: class
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_FindingsGroupedByControl'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Search findings grouped by control class
      tags:
      - Findings
  /findings/compliance-by-search:
    post:
      consumes:
      - application/json
      description: Fetches an intervalled compliance report for findings that match
        the provided label filter. The report groups findings status over time and
        returns a list of compliance report groups.
      parameters:
      - description: Label filter criteria
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/labelfilter.Filter'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_StatusOverTimeGroup'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get intervalled compliance report by search
      tags:
      - Findings
  /findings/history/{uuid}:
    get:
      description: Fetches up to 200 findings (ordered by Collected descending) that
        share the same stream UUID.
      parameters:
      - description: Stream UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Finding'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get finding history by stream UUID
      tags:
      - Findings
  /findings/instant-compliance-by-control/{class}/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Label filter criteria
        in: path
        name: class
        required: true
        type: string
      - description: Label filter criteria
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_StatusOverTimeRecord'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get compliance report by controlID
      tags:
      - Findings
  /findings/list-control-classes:
    get:
      consumes:
      - application/json
      description: Retrieves all unique control classes found in the stored findings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List unique control classes from findings
      tags:
      - Findings
  /findings/search:
    post:
      consumes:
      - application/json
      description: Searches for findings using label filters.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Finding'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Search findings by labels
      tags:
      - Findings
  /findings/search-by-subject:
    post:
      consumes:
      - application/json
      description: Searches for findings, and groups them by subject
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_FindingsBySubject'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Search findings grouped by subject
      tags:
      - Findings
  /groups/catalog/{catalog}:
    get:
      description: Retrieves catalog groups that belong to a catalog, identified by
        its unique catalog ID.
      parameters:
      - description: Catalog ID
        in: path
        name: catalog
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_CatalogGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get catalog groups for a catalog parent
      tags:
      - CatalogGroups
  /groups/children/{class}/{id}:
    get:
      description: Retrieves catalog groups that belong to a parent group, identified
        by its class and ID.
      parameters:
      - description: Catalog ID
        in: path
        name: catalog
        required: true
        type: string
      - description: Parent group class
        in: path
        name: class
        required: true
        type: string
      - description: Parent group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_CatalogGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get catalog groups for a group parent
      tags:
      - CatalogGroups
  /observations:
    post:
      consumes:
      - application/json
      description: Creates multiple observations in the CCF API, along with their
        subject and component counterparts.
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create new observations
      tags:
      - Observations
  /observations/{id}:
    get:
      description: Fetches an observation based on its internal ID.
      parameters:
      - description: Observation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Observation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a single observation
      tags:
      - Observations
  /observations/history/{uuid}:
    get:
      description: Fetches up to 200 observations (ordered by Collected descending)
        that share the same stream UUID.
      parameters:
      - description: Stream UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Observation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get observation history by stream UUID
      tags:
      - Observations
  /oscal/catalogs:
    get:
      description: Retrieves all catalogs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscal_List_responseCatalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List catalogs
      tags:
      - Oscal
    post:
      consumes:
      - application/json
      description: Creates a new OSCAL Catalog.
      parameters:
      - description: Catalog object
        in: body
        name: catalog
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Catalog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Catalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}:
    get:
      description: Retrieves a single Catalog by its unique ID.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscal_Get_responseCatalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a Catalog
      tags:
      - Oscal
    put:
      consumes:
      - application/json
      description: Updates an existing OSCAL Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Catalog object
        in: body
        name: catalog
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Catalog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Catalog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/back-matter:
    get:
      description: Retrieves the back-matter for a given Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_BackMatter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get back-matter for a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/controls:
    get:
      description: Retrieves the top-level controls for a given Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List controls for a Catalog
      tags:
      - Oscal
    post:
      consumes:
      - application/json
      description: Adds a top-level control under the specified Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Control object
        in: body
        name: control
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new Control for a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/controls/{control}:
    get:
      description: Retrieves a single Control by its ID for a given Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Control ID
        in: path
        name: control
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a specific Control within a Catalog
      tags:
      - Oscal
    put:
      consumes:
      - application/json
      description: Updates the properties of an existing Control under the specified
        Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Control ID
        in: path
        name: control
        required: true
        type: string
      - description: Updated Control object
        in: body
        name: control
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update a Control within a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/controls/{control}/controls:
    get:
      description: Retrieves the controls directly under a specific Control in a given
        Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Control ID
        in: path
        name: control
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List child controls for a Control within a Catalog
      tags:
      - Oscal
    post:
      consumes:
      - application/json
      description: Adds a child control under the specified Catalog Control.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Parent Control ID
        in: path
        name: control
        required: true
        type: string
      - description: Control object
        in: body
        name: control
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new Sub-Control for a Control within a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/groups:
    get:
      description: Retrieves the top-level groups for a given Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscalTypes_1_1_3_Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List groups for a Catalog
      tags:
      - Oscal
    post:
      consumes:
      - application/json
      description: Adds a top-level group under the specified Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Group object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Group'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new Group for a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/groups/{group}:
    get:
      description: Retrieves a single Group by its ID for a given Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Group ID
        in: path
        name: group
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a specific Group within a Catalog
      tags:
      - Oscal
    put:
      consumes:
      - application/json
      description: Updates the properties of an existing Group under the specified
        Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Group ID
        in: path
        name: group
        required: true
        type: string
      - description: Updated Group object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update a Group within a Catalog
      tags:
      - Oscal
  /oscal/catalogs/{id}/groups/{group}/controls:
    get:
      description: Retrieves the controls directly under a specific Group in a given
        Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Group ID
        in: path
        name: group
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List controls for a Group within a Catalog
      tags:
      - Oscal
    post:
      consumes:
      - application/json
      description: Adds a control under the specified Catalog and Group.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Parent Group ID
        in: path
        name: group
        required: true
        type: string
      - description: Control object
        in: body
        name: control
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Control'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Control'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new Control for a Catalog Group
      tags:
      - Oscal
  /oscal/catalogs/{id}/groups/{group}/groups:
    get:
      description: Retrieves the sub-groups of a specific Group in a given Catalog.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Group ID
        in: path
        name: group
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscalTypes_1_1_3_Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List sub-groups for a Group within a Catalog
      tags:
      - Oscal
    post:
      consumes:
      - application/json
      description: Adds a sub-group under the specified Catalog and Group.
      parameters:
      - description: Catalog ID
        in: path
        name: id
        required: true
        type: string
      - description: Parent Group ID
        in: path
        name: group
        required: true
        type: string
      - description: Group object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/oscalTypes_1_1_3.Group'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new Sub-Group for a Catalog Group
      tags:
      - Oscal
  /oscal/component-definitions:
    get:
      description: Retrieves all component definitions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscal_List_responseComponentDefinition'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List component definitions
      tags:
      - Oscal
  /oscal/profiles:
    get:
      description: Retrieves all OSCAL profiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-oscal_List_response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List Profiles
      tags:
      - Oscal
      - Profiles
  /oscal/profiles/{id}:
    get:
      description: Get an OSCAL profile with the uuid provided
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscal_Get_response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get Profile
      tags:
      - Oscal
      - Profiles
  /oscal/ssp/{id}/back-matter:
    get:
      description: Retrieves the back-matter for a given System Security Plan by the
        specified param ID in the path
      parameters:
      - description: System Security Plan ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-oscalTypes_1_1_3_BackMatter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get back-matter for a System Security Plan
      tags:
      - Oscal System Security Plan
  /subjects:
    get:
      description: Retrieves a list of all subjects from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-array_service_Subject'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get all subjects
      tags:
      - Subjects
  /subjects/{id}:
    delete:
      description: Deletes a subject from the database based on its internal ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Delete a subject
      tags:
      - Subjects
    get:
      description: Fetches a subject based on its internal ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Subject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a single subject
      tags:
      - Subjects
    patch:
      description: Updates a subject's title and/or remarks based on the provided
        subject ID. Only title and remarks are updated if provided. If no fields are
        provided, a `400 Bad Request` is returned.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      - description: Title and remarks data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateSubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Subject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update a subject's title and/or remarks
      tags:
      - Subjects
produces:
- application/json
swagger: "2.0"
