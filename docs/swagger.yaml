basePath: /api
consumes:
- application/json
definitions:
  api.Error:
    properties:
      errors:
        additionalProperties: true
        type: object
    type: object
  handler.GenericDataListResponse-service_Dashboard:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Dashboard'
        type: array
    type: object
  handler.GenericDataListResponse-service_Finding:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Finding'
        type: array
    type: object
  handler.GenericDataListResponse-service_FindingsBySubject:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.FindingsBySubject'
        type: array
    type: object
  handler.GenericDataListResponse-service_FindingsGroupedByControl:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.FindingsGroupedByControl'
        type: array
    type: object
  handler.GenericDataListResponse-service_Observation:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Observation'
        type: array
    type: object
  handler.GenericDataListResponse-service_StatusOverTimeGroup:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.StatusOverTimeGroup'
        type: array
    type: object
  handler.GenericDataListResponse-string:
    properties:
      data:
        description: Items from the list response
        items:
          type: string
        type: array
    type: object
  handler.GenericDataResponse-array_service_Subject:
    properties:
      data:
        description: Items from the list response
        items:
          $ref: '#/definitions/service.Subject'
        type: array
    type: object
  handler.GenericDataResponse-service_Dashboard:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Dashboard'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-service_Observation:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Observation'
        description: Items from the list response
    type: object
  handler.GenericDataResponse-service_Subject:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/service.Subject'
        description: Items from the list response
    type: object
  handler.UpdateSubjectRequest:
    properties:
      remarks:
        type: string
      title:
        type: string
    type: object
  handler.createDashboardRequest:
    properties:
      filter:
        $ref: '#/definitions/labelfilter.Filter'
      name:
        type: string
    required:
    - filter
    - name
    type: object
  labelfilter.Condition:
    properties:
      label:
        description: Label name (e.g., "type", "group", "app").
        type: string
      operator:
        description: Operator (e.g., "=", "!=", etc.).
        type: string
      value:
        description: Value for the condition (e.g., "ssh", "prod").
        type: string
    type: object
  labelfilter.Filter:
    properties:
      scope:
        $ref: '#/definitions/labelfilter.Scope'
    type: object
  labelfilter.Query:
    properties:
      operator:
        description: Logical operator (e.g., "AND", "OR").
        type: string
      scopes:
        description: Scopes can be either `Condition` or nested `Query`.
        items:
          $ref: '#/definitions/labelfilter.Scope'
        type: array
    type: object
  labelfilter.Scope:
    properties:
      condition:
        $ref: '#/definitions/labelfilter.Condition'
      query:
        $ref: '#/definitions/labelfilter.Query'
    type: object
  service.Dashboard:
    properties:
      filter:
        $ref: '#/definitions/labelfilter.Filter'
      name:
        type: string
      uuid:
        type: string
    type: object
  service.Finding:
    properties:
      _id:
        description: ID is the unique ID for this specific observation, and will be
          used as the primary key in the database.
        type: string
      collected:
        type: string
      components:
        description: Which components of the subject are being judged
        items:
          type: string
        type: array
      controls:
        description: Which controls did we validate
        items:
          $ref: '#/definitions/types.ControlReference'
        type: array
      description:
        type: string
      labels:
        additionalProperties:
          type: string
        description: Labels represent the unique labels which can be used to filter
          for findings in the UI.
        type: object
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      observations:
        description: Which observations led to this judgment ?
        items:
          type: string
        type: array
      origins:
        description: Who is generating this finding
        items:
          $ref: '#/definitions/types.Origin'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      risks:
        description: Which risks are associated with what we've tested
        items:
          $ref: '#/definitions/types.RiskReference'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/types.FindingStatus'
        description: What is our conclusion drawn for this finding. satisfied | not-satisfied
      subjects:
        description: What are we making a judgement against
        items:
          type: string
        type: array
      title:
        type: string
      uuid:
        description: |-
          UUID needs to remain consistent when automation runs again, but unique for each subject.
          It represents the "stream" of the same finding being made over time.
        type: string
    type: object
  service.FindingsBySubject:
    properties:
      findings:
        items:
          $ref: '#/definitions/service.Finding'
        type: array
      subject:
        type: string
    type: object
  service.FindingsGroupedByControl:
    properties:
      controlid:
        type: string
      findings:
        items:
          $ref: '#/definitions/service.Finding'
        type: array
    type: object
  service.Observation:
    properties:
      _id:
        description: ID is the unique ID for this specific observation, and will be
          used as the primary key in the database.
        type: string
      activities:
        description: What steps did we take to make this observation
        items:
          $ref: '#/definitions/types.Activity'
        type: array
      collected:
        type: string
      components:
        description: Which components of the subject are being observed
        items:
          type: string
        type: array
      description:
        type: string
      expires:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      methods:
        items:
          type: string
        type: array
      origins:
        description: Who is generating this finding
        items:
          $ref: '#/definitions/types.Origin'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      relevant-evidence:
        description: What exactly did we see
        items:
          $ref: '#/definitions/types.RelevantEvidence'
        type: array
      remarks:
        type: string
      subjects:
        description: What are we observing
        items:
          type: string
        type: array
      title:
        type: string
      uuid:
        description: |-
          UUID needs to remain consistent when automation runs again, but unique for each subject.
          It represents the "stream" of the same observation being made over time.
        type: string
    type: object
  service.StatusOverTimeGroup:
    properties:
      interval:
        type: string
      statuses:
        items:
          $ref: '#/definitions/service.StatusOverTimeRecord'
        type: array
    type: object
  service.StatusOverTimeRecord:
    properties:
      count:
        type: integer
      status:
        type: string
    type: object
  service.Subject:
    properties:
      _id:
        type: string
      attributes:
        additionalProperties:
          type: string
        type: object
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  types.Activity:
    properties:
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      steps:
        items:
          $ref: '#/definitions/types.Step'
        type: array
      title:
        type: string
      uuid:
        type: string
    type: object
  types.ControlReference:
    properties:
      class:
        type: string
      control-id:
        type: string
      statement-ids:
        items:
          type: string
        type: array
    type: object
  types.FindingStatus:
    properties:
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      state:
        type: string
      title:
        type: string
    type: object
  types.Link:
    properties:
      href:
        type: string
      media-type:
        type: string
      rel:
        type: string
      resource-fragment:
        type: string
      text:
        type: string
    type: object
  types.Origin:
    properties:
      actors:
        items:
          $ref: '#/definitions/types.OriginActor'
        type: array
    type: object
  types.OriginActor:
    properties:
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      title:
        type: string
      type:
        type: string
      uuid:
        type: string
    type: object
  types.Property:
    properties:
      class:
        type: string
      group:
        type: string
      name:
        type: string
      ns:
        type: string
      remarks:
        type: string
      uuid:
        type: string
      value:
        type: string
    type: object
  types.RelevantEvidence:
    properties:
      description:
        type: string
      href:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
    type: object
  types.RiskReference:
    properties:
      href:
        description: If a Href is specified here, it means we are referencing a common
          risk, and should be pulled from there.
        type: string
      identifier:
        type: string
      origins:
        description: Who is generating this risk
        items:
          $ref: '#/definitions/types.Origin'
        type: array
      status:
        description: The status for the risk. This can either be open|closed based
          on whether the risk is active or not.
        type: string
      threat-ids:
        description: |-
          These threats relate to well known threats like phishing emails, brute force attacks, etc. often detailed
          by cyber-security organisations.
        items:
          $ref: '#/definitions/types.ThreatId'
        type: array
    type: object
  types.Step:
    properties:
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/types.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/types.Property'
        type: array
      remarks:
        type: string
      title:
        type: string
      uuid:
        type: string
    type: object
  types.ThreatId:
    properties:
      href:
        type: string
      id:
        type: string
      system:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API for the Continuous Compliance Framework.
  title: Continuous Compliance Framework API
  version: "1"
paths:
  /compliance-by-uuid/{uuid}:
    get:
      consumes:
      - application/json
      description: Fetches an intervalled compliance report for findings that match
        the provided uuid. The report groups findings status over time and returns
        a list of compliance report groups.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_StatusOverTimeGroup'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get intervalled compliance report by finding uuid
      tags:
      - Findings
  /dashboard:
    get:
      description: Retrieves all dashboards.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List dashboards
      tags:
      - Dashboards
    post:
      consumes:
      - application/json
      description: Creates a new dashboard.
      parameters:
      - description: Dashboard to add
        in: body
        name: dashboard
        required: true
        schema:
          $ref: '#/definitions/handler.createDashboardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new dashboard
      tags:
      - Dashboards
  /dashboard/{id}:
    get:
      description: Retrieves a single dashboard by its unique ID.
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Dashboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a dashboard
      tags:
      - Dashboards
  /findings:
    post:
      consumes:
      - application/json
      description: Creates multiple findings in the CCF API, as well as their subject
        and component counterparts.
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create new findings
      tags:
      - Findings
  /findings/{id}:
    get:
      description: Fetches a finding based on its internal ID.
      parameters:
      - description: Finding ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Finding'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a single finding
      tags:
      - Findings
  /findings/by-control/{class}:
    get:
      consumes:
      - application/json
      description: Searches for findings and groups them by control class
      parameters:
      - description: Control Class
        in: path
        name: class
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_FindingsGroupedByControl'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Search findings grouped by control class
      tags:
      - Findings
  /findings/compliance-by-search:
    post:
      consumes:
      - application/json
      description: Fetches an intervalled compliance report for findings that match
        the provided label filter. The report groups findings status over time and
        returns a list of compliance report groups.
      parameters:
      - description: Label filter criteria
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/labelfilter.Filter'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_StatusOverTimeGroup'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get intervalled compliance report by search
      tags:
      - Findings
  /findings/history/{uuid}:
    get:
      description: Fetches up to 200 findings (ordered by Collected descending) that
        share the same stream UUID.
      parameters:
      - description: Stream UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Finding'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get finding history by stream UUID
      tags:
      - Findings
  /findings/list-control-classes:
    get:
      consumes:
      - application/json
      description: Retrieves all unique control classes found in the stored findings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: List unique control classes from findings
      tags:
      - Findings
  /findings/search:
    post:
      consumes:
      - application/json
      description: Searches for findings using label filters.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Finding'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Search findings by labels
      tags:
      - Findings
  /findings/search-by-subject:
    post:
      consumes:
      - application/json
      description: Searches for findings, and groups them by subject
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_FindingsBySubject'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Search findings grouped by subject
      tags:
      - Findings
  /observations:
    post:
      consumes:
      - application/json
      description: Creates multiple observations in the CCF API, along with their
        subject and component counterparts.
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create new observations
      tags:
      - Observations
  /observations/{id}:
    get:
      description: Fetches an observation based on its internal ID.
      parameters:
      - description: Observation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Observation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a single observation
      tags:
      - Observations
  /observations/history/{uuid}:
    get:
      description: Fetches up to 200 observations (ordered by Collected descending)
        that share the same stream UUID.
      parameters:
      - description: Stream UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataListResponse-service_Observation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get observation history by stream UUID
      tags:
      - Observations
  /subjects:
    get:
      description: Retrieves a list of all subjects from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-array_service_Subject'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get all subjects
      tags:
      - Subjects
  /subjects/{id}:
    delete:
      description: Deletes a subject from the database based on its internal ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Delete a subject
      tags:
      - Subjects
    get:
      description: Fetches a subject based on its internal ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Subject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a single subject
      tags:
      - Subjects
    patch:
      description: Updates a subject's title and/or remarks based on the provided
        subject ID. Only title and remarks are updated if provided. If no fields are
        provided, a `400 Bad Request` is returned.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      - description: Title and remarks data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateSubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GenericDataResponse-service_Subject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update a subject's title and/or remarks
      tags:
      - Subjects
produces:
- application/json
swagger: "2.0"
