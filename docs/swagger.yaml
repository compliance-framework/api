definitions:
  api.Error:
    properties:
      errors:
        additionalProperties: true
        type: object
    type: object
  domain.Action:
    properties:
      date:
        type: string
      description:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/domain.Link'
        type: array
      props:
        items:
          $ref: '#/definitions/domain.Property'
        type: array
      remarks:
        type: string
      responsiblePartyUuids:
        items:
          type: string
        type: array
      system:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  domain.BackMatter:
    properties:
      resources:
        items:
          $ref: '#/definitions/domain.Resource'
        type: array
    type: object
  domain.Base64:
    properties:
      filename:
        description: Name of the file before it was encoded as Base64.
        type: string
      media-type:
        description: A label that indicates the nature of a resource.
        type: string
      value:
        description: The Base64 encoded value.
        type: string
    type: object
  domain.Citation:
    properties:
      links:
        description: Links associated with the citation.
        items:
          $ref: '#/definitions/domain.Link'
        type: array
      props:
        description: Properties of the citation.
        items:
          $ref: '#/definitions/domain.Property'
        type: array
      text:
        description: A line of citation text.
        type: string
    type: object
  domain.DocumentIdentifier:
    properties:
      identifier:
        description: The document identifier.
        type: string
      scheme:
        description: Qualifies the kind of document identifier using a URI.
    type: object
  domain.Import:
    properties:
      exclude_controls:
        items:
          $ref: '#/definitions/domain.Selection'
        type: array
      href:
        description: Href is the URI of the source catalog or profile. Should be in
          the format `catalog/{catalog_uuid}` or `profile/{profile_uuid}`.
        type: string
      include_all:
        type: boolean
      include_controls:
        items:
          $ref: '#/definitions/domain.Selection'
        type: array
    type: object
  domain.Link:
    properties:
      href:
        type: string
      mediaType:
        type: string
      rel:
        type: string
      resourceFragment:
        type: string
      text:
        type: string
    type: object
  domain.Metadata:
    properties:
      actions:
        items:
          $ref: '#/definitions/domain.Action'
        type: array
      partyUuids:
        items:
          type: string
        type: array
      responsiblePartyUuids:
        items:
          type: string
        type: array
      revisions:
        items:
          $ref: '#/definitions/domain.Revision'
        type: array
      roleUuids:
        items:
          type: string
        type: array
    type: object
  domain.Profile:
    properties:
      backmatter:
        $ref: '#/definitions/domain.BackMatter'
      imports:
        items:
          $ref: '#/definitions/domain.Import'
        type: array
      metadata:
        $ref: '#/definitions/domain.Metadata'
      title:
        type: string
      uuid:
        type: string
    type: object
  domain.Property:
    properties:
      class:
        type: string
      group:
        type: string
      ns:
        type: string
      remarks:
        type: string
      uuid:
        type: string
      value:
        type: string
    type: object
  domain.Resource:
    properties:
      base64:
        allOf:
        - $ref: '#/definitions/domain.Base64'
        description: A resource encoded using the Base64 alphabet.
      citation:
        allOf:
        - $ref: '#/definitions/domain.Citation'
        description: An optional citation associated with the resource.
      description:
        description: An optional short summary of the resource.
        type: string
      document-ids:
        description: Document identifiers associated with the resource.
        items:
          $ref: '#/definitions/domain.DocumentIdentifier'
        type: array
      props:
        description: Properties of the resource.
        items:
          $ref: '#/definitions/domain.Property'
        type: array
      remarks:
        description: Remarks about the resource.
        type: string
      rlinks:
        description: Related links of the resource.
        items:
          $ref: '#/definitions/domain.Link'
        type: array
      title:
        description: An optional name given to the resource.
        type: string
      uuid:
        description: A unique identifier for a resource.
        type: string
    type: object
  domain.Revision:
    properties:
      description:
        type: string
      lastModified:
        type: string
      links:
        items:
          $ref: '#/definitions/domain.Link'
        type: array
      oscalVersion:
        type: string
      props:
        items:
          $ref: '#/definitions/domain.Property'
        type: array
      published:
        type: string
      remarks:
        type: string
      title:
        type: string
      version:
        type: string
    type: object
  domain.Selection:
    properties:
      exclude:
        items:
          type: string
        type: array
      include:
        items:
          type: string
        type: array
      includeAll:
        type: boolean
    type: object
  handler.attachMetadataRequest:
    properties:
      collection:
        type: string
      id:
        type: string
      revisionDescription:
        type: string
      revisionRemarks:
        type: string
      revisionTitle:
        type: string
    required:
    - collection
    - id
    type: object
  handler.catalogIdResponse:
    properties:
      id:
        description: |-
          The unique identifier of the catalog.
          Required: true
          Example: "123abc"
        type: string
    type: object
  handler.createActivityRequest:
    properties:
      description:
        type: string
      provider:
        properties:
          name:
            type: string
          package:
            type: string
          params:
            additionalProperties:
              type: string
            type: object
          version:
            type: string
        required:
        - name
        - package
        - version
        type: object
      subjects:
        properties:
          description:
            type: string
          expressions:
            items:
              properties:
                key:
                  type: string
                operator:
                  type: string
                values:
                  items:
                    type: string
                  type: array
              type: object
            type: array
          ids:
            items:
              type: string
            type: array
          labels:
            additionalProperties:
              type: string
            type: object
          query:
            type: string
          title:
            type: string
        required:
        - description
        - title
        type: object
      title:
        type: string
    required:
    - provider
    - title
    type: object
  handler.createCatalogRequest:
    properties:
      catalog:
        properties:
          title:
            type: string
        required:
        - title
        type: object
    type: object
  handler.createPlanRequest:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  handler.createProfileRequest:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  handler.createTaskRequest:
    properties:
      description:
        type: string
      title:
        description: 'TODO: We are keeping it minimal for now for the demo'
        type: string
      type:
        type: string
    required:
    - title
    - type
    type: object
  handler.idResponse:
    properties:
      id:
        description: |-
          The unique identifier of the plan.
          Required: true
          Example: "456def"
        type: string
    type: object
info:
  contact: {}
paths:
  /api/catalog:
    post:
      consumes:
      - application/json
      description: Create a catalog with the given title
      parameters:
      - description: Catalog to add
        in: body
        name: catalog
        required: true
        schema:
          $ref: '#/definitions/handler.createCatalogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.catalogIdResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a catalog
      tags:
      - Catalog
  /api/metadata/revisions:
    post:
      consumes:
      - application/json
      description: This method attaches metadata to a specific revision.
      parameters:
      - description: Revision that will be attached
        in: body
        name: revision
        required: true
        schema:
          $ref: '#/definitions/handler.attachMetadataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: 'Bad Request: Error binding the request'
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Object not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Attaches metadata to a specific revision
      tags:
      - Metadata
  /api/plan:
    post:
      consumes:
      - application/json
      description: Creates a new plan in the system
      parameters:
      - description: Plan to add
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/handler.createPlanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.idResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a plan
      tags:
      - Plan
  /api/plan/{id}/tasks:
    post:
      consumes:
      - application/json
      description: This method creates a new task and adds it to a specific plan.
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      - description: Task to add
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handler.createTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the task to the plan
          schema:
            type: string
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: 'Unprocessable Entity: Error binding the request'
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Creates a new task for a specific plan
      tags:
      - Plan
  /api/plan/{id}/tasks/{taskId}/activities:
    post:
      consumes:
      - application/json
      description: This function is used to create an activity for a given task.
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Activity
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/handler.createActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: "201"
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create activity
      tags:
      - Plan
  /api/profile:
    post:
      consumes:
      - application/json
      description: Creates a new profile in the system
      parameters:
      - description: Profile to add
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/handler.createProfileRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.idResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a profile
      tags:
      - Profile
  /api/profile/{id}:
    get:
      consumes:
      - application/json
      description: Get a profile by its id
      parameters:
      - description: Profile id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Profile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a profile by id
      tags:
      - Profile
  /api/profile/{title}:
    get:
      consumes:
      - application/json
      description: Get a profile by its title
      parameters:
      - description: Profile title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Profile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get a profile by title
      tags:
      - Profile
  /plan/{id}/activate:
    put:
      consumes:
      - application/json
      description: Activate a plan by its ID. If the plan is already active, no action
        will be taken.
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal server error. The plan could not be activated.
          schema:
            $ref: '#/definitions/api.Error'
      summary: Activate a plan
      tags:
      - Plan
swagger: "2.0"
