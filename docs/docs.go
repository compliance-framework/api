// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/catalog": {
            "post": {
                "description": "Create a catalog with the given title",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalog"
                ],
                "summary": "Create a catalog",
                "parameters": [
                    {
                        "description": "Catalog to add",
                        "name": "catalog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createCatalogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.catalogIdResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/metadata/revisions": {
            "post": {
                "description": "This method attaches metadata to a specific revision.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Attaches metadata to a specific revision",
                "parameters": [
                    {
                        "description": "Revision that will be attached",
                        "name": "revision",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.attachMetadataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Error binding the request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Object not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/plan": {
            "post": {
                "description": "Creates a new plan in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Create a plan",
                "parameters": [
                    {
                        "description": "Plan to add",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createPlanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.idResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/plan/{id}/tasks": {
            "post": {
                "description": "This method creates a new task and adds it to a specific plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Creates a new task for a specific plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task to add",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added the task to the plan",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Plan not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity: Error binding the request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/plan/{id}/tasks/{taskId}/activities": {
            "post": {
                "description": "This function is used to create an activity for a given task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Create activity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity",
                        "name": "activity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createActivityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "201"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/plan/{id}/activate": {
            "put": {
                "description": "Activate a plan by its ID. If the plan is already active, no action will be taken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Activate a plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal server error. The plan could not be activated.",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Error": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "handler.attachMetadataRequest": {
            "type": "object",
            "required": [
                "collection",
                "id"
            ],
            "properties": {
                "collection": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "revisionDescription": {
                    "type": "string"
                },
                "revisionRemarks": {
                    "type": "string"
                },
                "revisionTitle": {
                    "type": "string"
                }
            }
        },
        "handler.catalogIdResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier of the catalog.\nRequired: true\nExample: \"123abc\"",
                    "type": "string"
                }
            }
        },
        "handler.createActivityRequest": {
            "type": "object",
            "required": [
                "provider",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "provider": {
                    "type": "object",
                    "required": [
                        "name",
                        "package",
                        "version"
                    ],
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "package": {
                            "type": "string"
                        },
                        "params": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "version": {
                            "type": "string"
                        }
                    }
                },
                "subjects": {
                    "type": "object",
                    "required": [
                        "description",
                        "title"
                    ],
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "expressions": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "operator": {
                                        "type": "string"
                                    },
                                    "values": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "ids": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "labels": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "query": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        }
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handler.createCatalogRequest": {
            "type": "object",
            "properties": {
                "catalog": {
                    "type": "object",
                    "required": [
                        "title"
                    ],
                    "properties": {
                        "title": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "handler.createPlanRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "title": {
                    "type": "string"
                }
            }
        },
        "handler.createTaskRequest": {
            "type": "object",
            "required": [
                "title",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "title": {
                    "description": "TODO: We are keeping it minimal for now for the demo",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "handler.idResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier of the plan.\nRequired: true\nExample: \"456def\"",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
