# Default values for ccf.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  # Environment name (dev, staging, prod)
  environment: dev

# CCF API Configuration
api:
  # Number of API replicas
  replicaCount: 1
  
  image:
    repository: api
    tag: local
    pullPolicy: Never  # Set to Always for production
  
  service:
    type: NodePort
    port: 8080
    nodePort: 30080
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Environment variables (non-sensitive only)
  env:
    APP_PORT: "8080"
    CCF_DB_DRIVER: "postgres"
    # Additional env vars can be added here
  
  # Authentication configuration
  auth:
    jwtSecret: ""  # If empty, will be auto-generated
    apiKey: ""  # Optional API key for additional security
  
  # Logging
  logLevel: "info"  # debug, info, warn, error
  
  # Health probe configuration
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
  
  # Database connection will be constructed from postgres values
  # CCF_DB_CONNECTION is built dynamically in the template

# PostgreSQL Configuration
postgresql:
  enabled: true
  
  image:
    repository: postgres
    tag: "17.5"
    pullPolicy: IfNotPresent
  
  # PostgreSQL authentication
  auth:
    username: postgres
    password: postgres  # CHANGE THIS IN PRODUCTION!
    database: ccf
  
  # SSL/TLS configuration
  ssl:
    enabled: false  # Enable in production
    mode: "require"  # disable, allow, prefer, require, verify-ca, verify-full
  
  # Service configuration
  service:
    port: 5432
  
  # Resource limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Persistence configuration
  persistence:
    enabled: false  # Set to true for production
    size: 10Gi
    storageClass: ""  # Leave empty for default

# Ingress configuration (optional)
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ccf.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: ccf-tls
  #    hosts:
  #      - ccf.local

# Additional ConfigMap data
configMap:
  # Add any additional configuration here
  data: {}

# Pod Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Container Security Context
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Network Policy
networkPolicy:
  enabled: false  # Enable in production

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# External Secrets Configuration
externalSecrets:
  enabled: false  # Set to true when using Sealed Secrets or other external secret managers
  # When enabled, the chart expects these secrets to exist:
  # - ccf-api-secrets (with keys: database-password, database-username, database-name, jwt-secret, api-key)
  # - ccf-api-postgresql (with keys: postgres-password, password, username)